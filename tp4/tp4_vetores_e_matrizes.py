# -*- coding: utf-8 -*-
"""TP4 - Vetores e Matrizes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10EADcp3w8odoGLpjUvm4-tE5wNspQCtO

### Trabalho 4 de Desenvolvimento LInux

Enunciado:

Objetivo: O objetivo principal é estudar a utilização eficiente de matrizes na linguagem Python, muito empregada na computação matemática. Basicamente, estudar sobre o uso das bibliotecas Numpy e Scipy.

Tarefas:

1.  Implementar em python o método de Gauss-Jordan para resolução de sistemas de equações lineares. Resolva o problema utilizando a biblioteca Numpy (manipulação de matrizes).

2.  Depois resolva o mesmo problema utlizando as facilidades da biblioteca Scipy (utilize o solve).

3.  Compare os resultados para avaliar a corretude do método Gauss-Jordan que você implementou no 1 passo.
"""

!pip install numpy scipy

import numpy as np
from scipy import linalg
import time

A = np.array([
     [5, 5, 0],
     [2, 4, 1],
     [3, 4, 0]
     ])
B = np.array([15, 10, 11])

start_time = time.time()

n = len(B)
aug_matrix = np.hstack([A, B.reshape(-1, 1)])

for i in range(n):
    max_row = np.argmax(np.abs(aug_matrix[i:, i])) + i
    aug_matrix[[i, max_row]] = aug_matrix[[max_row, i]]

    aug_matrix[i] = aug_matrix[i] / aug_matrix[i, i]

    for j in range(n):
        if i != j:
            factor = aug_matrix[j, i]
            aug_matrix[j] = aug_matrix[j] - factor * aug_matrix[i]

X = aug_matrix[:, -1]

end_time = time.time()

print("Solução:", X)
tempo_numpy = end_time - start_time
print(f"Tempo de execução: {end_time - start_time:.5f} segundos")

start_time = time.time()

X = linalg.solve(A, B)

end_time = time.time()

print("Solução:", X)
tempo_scipy = end_time - start_time
print(f"Tempo de execução: {end_time - start_time:.5f} segundos")

print("Comparação: diferença entre tempos de execução")
print(f"Scipy - Numpy {tempo_scipy - tempo_numpy:.5f} segundos")